class Solution{
    private:
    bool isSafe(int newx,int newy,int n,vector<vector<int>>m,vector<vector<int>>visited)
    {
        if((newx >= 0 && newx < n) && (newy >= 0 && newy < n) && visited[newx][newy] == 0 && m[newx][newy] == 1)  return true;
        return false;
    }
  
    void solve(vector<vector<int>>m,int n,vector<string>&ans,vector<vector<int>>visited,int x,int y,string path)
    {
        //base case
        if(x == n-1 && y == n-1)
        {
            ans.push_back(path);
            return;
        }
        
        visited[x][y] = 1;
        //4 choices---->left,right,up,down
        
        //down
        int newx = x+1;
        int newy = y;
        if(isSafe(newx,newy,n,m,visited))
        {
            path.push_back('D');
            solve(m,n,ans,visited,newx,newy,path);
            path.pop_back();
        }
        //up
         newx = x-1;
        newy = y;
        if(isSafe(newx,newy,n,m,visited))
        {
            path.push_back('U');
            solve(m,n,ans,visited,newx,newy,path);
            path.pop_back();
        }
        //LEFT
         newx = x;
         newy = y-1;
        if(isSafe(newx,newy,n,m,visited))
        {
            path.push_back('L');
            solve(m,n,ans,visited,newx,newy,path);
            path.pop_back();
        }
        //RIGHT
         newx = x;
         newy = y+1;
        if(isSafe(newx,newy,n,m,visited))
        {
            path.push_back('R');
            solve(m,n,ans,visited,newx,newy,path);
            path.pop_back();
        }
        visited[x][y] = 0;
        return;
    }
    
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        
        vector<string>ans;
        
        if(m[0][0] == 0) return ans;
        int srcx = 0, srcy = 0;
        vector<vector<int>>visited = m;
        
        //initialise visited to 0
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                visited[i][j] = 0;
            }
        }
        
        string path = "";
        solve(m,n,ans,visited,srcx,srcy,path);
        //arranging lexicographically
        sort(ans.begin(),ans.end());
        return ans;
    }
};
